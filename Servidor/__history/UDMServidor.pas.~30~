unit UDMServidor;

interface

uses
  System.SysUtils, System.Classes, uDWDataModule, uRESTDWPoolerDB,
  uRESTDWDriverZEOS, uDWAbout, IniFiles, uRESTDWDriverFD, orm.conexao.ModelConexaoFactory,
  FireDAC.Comp.Client, uRESTDWServerEvents, uDWJSONObject, System.JSON, Data.DB,
  Datasnap.DBClient;

type
  TDMServidor = class(TServerMethodDataModule)
    RESTDWPoolerDB1: TRESTDWPoolerDB;
    RESTDWDriverZeos1: TRESTDWDriverZeos;
    RESTDWDriverFD1: TRESTDWDriverFD;
    DWServerEvents1: TDWServerEvents;
    cdsImagem: TClientDataSet;
    cdsImagemFOTO: TBlobField;
    procedure DWServerEvents1EventsgetFotoReplyEvent(var Params: TDWParams;
      var Result: string);
  private
    { Private declarations }
    FArqIni: TIniFile;
  public
    { Public declarations }
    procedure ConfiguraConexao;
  end;

var
  DMServidor: TDMServidor;

implementation

uses
  Vcl.Forms, ZConnection;

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

{ TDMServidor }

procedure TDMServidor.ConfiguraConexao;
var sFramework: string;
begin
  {
    Método que configura a conexão do banco de dados. Se é Zeos,Firedac.
  }
  FArqIni := TIniFile.Create(ExtractFilePath(Application.ExeName)+'\Config.ini');
  try
    sFramework := FArqIni.ReadString('Banco', 'Framework', '');
    if sFramework = 'Zeos' then
    begin
       RESTDWPoolerDB1.RESTDriver := RESTDWDriverZeos1;
       RESTDWDriverZeos1.Connection :=  TZConnection(TModelConexaoFactory.New.Conexao(1).Connection);
    end
    else if sFramework = 'Firedac' then
         begin
           RESTDWPoolerDB1.RESTDriver := RESTDWDriverFD1;
           RESTDWDriverFD1.Connection := TFDConnection(TModelConexaoFactory.New.Conexao(2).Connection);
         end;
  finally
    FArqIni.Free;
  end;
end;

procedure TDMServidor.DWServerEvents1EventsgetFotoReplyEvent(
  var Params: TDWParams; var Result: string);
var json: TJSONObject;
    StreamIn: TStream;
    StreamOut: TStringStream;
begin

end;

end.
