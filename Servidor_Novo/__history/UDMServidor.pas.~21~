unit UDMServidor;

interface

uses
  System.SysUtils, System.Classes, uRESTDWDriverZEOS, uRESTDWAbout, IniFiles, uRESTDWDriverFD, orm.conexao.ModelConexaoFactory,
  FireDAC.Comp.Client, uRESTDWServerEvents, uRESTDWJSONObject, System.JSON, Data.DB, Datasnap.DBClient, System.NetEncoding,
  uRESTDWBasic, uRESTDWComponentBase, uRESTDWBasicDB, uRESTDWDatamodule, uRESTDWParams;

type
  TDMServidor = class(TServerMethodDataModule)
    RESTDWPoolerDB1: TRESTDWPoolerDB;
    RESTDWDriverZeos1: TRESTDWDriverZeos;
    cdsImagem: TClientDataSet;
    cdsImagemFOTO: TBlobField;
    RESTDWServerEvents: TRESTDWServerEvents;
    RESTDWDriverFD1: TRESTDWDriverFD;
    procedure RESTDWServerEventsEventsgetFotoReplyEvent(
      var Params: TRESTDWParams; var Result: string);
  private
    { Private declarations }
    FArqIni: TIniFile;
  public
    { Public declarations }
    procedure ConfiguraConexao;
  end;

var
  DMServidor: TDMServidor;

implementation

uses
  Vcl.Forms, ZConnection;

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

{ TDMServidor }

procedure TDMServidor.ConfiguraConexao;
var sFramework: string;
begin
  {
    Método que configura a conexão do banco de dados. Se é Zeos,Firedac.
  }
  FArqIni := TIniFile.Create(ExtractFilePath(Application.ExeName)+'\Config.ini');
  try
    sFramework := FArqIni.ReadString('Banco', 'Framework', 'Framework');
    if sFramework = 'Zeos' then
    begin
       RESTDWPoolerDB1.RESTDriver := RESTDWDriverZeos1;
       RESTDWDriverZeos1.Connection :=  TZConnection(TModelConexaoFactory.New.Conexao(1).Connection);
    end
    else if sFramework = 'Firedac' then
         begin
           RESTDWPoolerDB1.RESTDriver := RESTDWDriverFD1;
           RESTDWDriverFD1.Connection := TFDConnection(TModelConexaoFactory.New.Conexao(2).Connection);
         end;
  finally
    FArqIni.Free;
  end;
end;

procedure TDMServidor.RESTDWServerEventsEventsgetFotoReplyEvent(
  var Params: TRESTDWParams; var Result: string);
var json: TJSONObject;
    StreamIn: TStream;
    StreamOut: TStringStream;
    arq: TFileStream;
begin
    json := TJSONObject.Create;
    try
     if not Params.ItemsString['caminhoFoto'].AsString.IsEmpty then
     begin
       //popular o cds.
       cdsImagem.Close;
       cdsImagem.Append;
       cdsImagemFOTO.LoadFromFile(Params.ItemsString['caminhoFoto'].AsString);
       cdsImagem.Post;
       cdsImagem.Open;
       StreamIn := cdsImagem.CreateBlobStream(cdsImagem.Fields[cdsImagem.RecNo], bmRead);
       StreamOut := TStringStream.Create;
       TNetEncoding.Base64.Encode(StreamIn, StreamOut);
       StreamOut.Position := 0;
       json.AddPair('Codigo', '200');
       json.AddPair('Mensagem', 'Foto encontada com sucesso.');
       json.AddPair('Foto', StreamOut.DataString);
     end
     else
     begin
       json.AddPair('Codigo', '500');
       json.AddPair('Mensagem', 'Foto não encontrada.');
     end;
     Result := json.ToString;
    finally
      json.Free;
    end;
end;

end.
